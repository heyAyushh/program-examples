name: Anchor Build and Test

on:
  schedule:
    - cron: "0 0 * * *"
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

env:
  ANCHOR_VERSION: "0.30.1"
  NODE_VERSION: "20.x"

jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      anchor: ${{ steps.filter.outputs.anchor }}
      anchor_action: ${{ steps.filter.outputs.anchor_action }}
      anchor_files: ${{ steps.filter.outputs.anchor_files }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          list-files: shell
          filters: |
            anchor:
              - added|modified: '**/anchor/**'
            anchor_action:
              - added|modified: '**/workflows/anchor.yml'
              - added|modified: '.github/.ghaignore'

  build-and-test:
    needs: changes
    if: |
      needs.changes.outputs.anchor == 'true' ||
      needs.changes.outputs.anchor_action == 'true' ||
      github.event_name == 'schedule' ||
      github.event_name == 'push'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        solana-version: [1.18.17, stable]
        batch: [0, 1, 2, 3] # Adjust the number of batches as needed
    steps:
      - uses: actions/checkout@v4

      - name: Setup Anchor
        uses: heyAyushh/setup-anchor@v4.0
        with:
          anchor-version: ${{ env.ANCHOR_VERSION }}
          solana-cli-version: ${{ matrix.solana-version }}
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm i -g pnpm

      - name: Display versions
        run: |
          solana -V
          solana-keygen new --no-bip39-passphrase
          rustc -V
          anchor -V

      - name: Process Anchor projects
        id: process
        run: |
          set -x

          # Determine which projects to process based on the event type
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ needs.changes.outputs.anchor_action }}" != "true" ]]; then
            changed_files="${{ needs.changes.outputs.anchor_files }}"
            search_pattern=$(echo "$changed_files" | tr ' ' '|' | sed 's/|$//')
          else
            search_pattern=".*"
          fi

          # Find Anchor projects, excluding those in .ghaignore
          ignore_file=".github/.ghaignore"
          projects=($(find . -type d -name "anchor" | sed 's|^\./||' | grep -E "$search_pattern" | grep -v -f <(grep . "$ignore_file" 2>/dev/null | grep -v '^$' || echo '^$')))

          # Batch projects
          total_projects=${#projects[@]}
          batch_size=$(( (total_projects + 3) / 4 ))
          start_index=$(( ${{ matrix.batch }} * batch_size ))
          end_index=$(( start_index + batch_size - 1 ))

          batch_projects=("${projects[@]:start_index:batch_size}")

          if [ ${#batch_projects[@]} -eq 0 ]; then
            echo "No projects to process in this batch."
            exit 0
          fi

          echo "Processing projects:"
          printf '%s\n' "${batch_projects[@]}"

          # Process (build and test) Anchor projects
          failed=false
          failed_projects=()

          for project in "${batch_projects[@]}"; do
            echo "::group::Processing $project"
            cd "$project" || continue

            echo "Building $project"
            if ! anchor build; then
              echo "::error file=${project}::Build failed for $project"
              failed=true
              failed_projects+=("$project (build)")
            else
              echo "Build succeeded for $project"

              echo "Installing dependencies for $project"
              if ! pnpm install --frozen-lockfile; then
                echo "::error file=${project}::Dependency installation failed for $project"
                failed=true
                failed_projects+=("$project (install)")
              else
                echo "Running tests for $project"
                if ! anchor test; then
                  echo "::error file=${project}::Tests failed for $project"
                  failed=true
                  failed_projects+=("$project (test)")
                else
                  echo "Tests succeeded for $project"
                fi
              fi
            fi

            rm -rf target node_modules
            cd - > /dev/null || exit
            echo "::endgroup::"
          done

          if [ "$failed" = true ]; then
            echo "::error::Failed projects: ${failed_projects[*]}"
            printf '%s\n' "${failed_projects[@]}"
            exit 1
          fi

          # Generate job summary
          {
            echo "## Batch ${{ matrix.batch }} Results (Solana ${{ matrix.solana-version }})"
            echo "Processed projects:"
            printf '%s\n' "${batch_projects[@]}"
          } >> $GITHUB_STEP_SUMMARY
        shell: bash

  summary:
    needs: build-and-test
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Summarize results
        run: |
          echo "# Anchor Build and Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.build-and-test.result }}" == "success" ]]; then
            echo "✅ All projects built and tested successfully." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some projects failed to build or test. Check the build logs for details." >> $GITHUB_STEP_SUMMARY
          fi
        shell: bash
