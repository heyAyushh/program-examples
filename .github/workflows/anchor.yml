name: Anchor Build and Test

on:
  schedule:
    - cron: "0 0 * * *"
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

env:
  ANCHOR_VERSION: "0.30.1"
  SOLANA_VERSION: "1.18.17"
  NODE_VERSION: "20.x"

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      project_batches: ${{ steps.process.outputs.project_batches }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Process Anchor projects
        id: process
        run: |
          set -e

          get_changed_projects() {
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} || echo "Git diff failed"
            elif [[ "${{ github.event_name }}" == "push" ]]; then
              git diff --name-only ${{ github.event.before }} ${{ github.event.after }} || echo "Git diff failed"
            else
              echo "Not a pull request or push event"
            fi
          }

          create_ignore_regex() {
            grep -v '^#' .github/.ghaignore 2>/dev/null | sed 's/^/^/' | sed 's/$/\//' | tr '\n' '|' | sed 's/|$//' || echo ""
          }

          filter_projects() {
            local ignore_regex="$1"
            if [[ -n "$ignore_regex" ]]; then
              grep -vE "$ignore_regex" || true
            else
              cat
            fi
          }

          batch_projects() {
            local batch_size=5
            jq -R -s 'split("\n")[:-1] | _nwise('"$batch_size"') | map(select(length > 0))' | jq -c '.'
          }

          ignore_regex=$(create_ignore_regex)
          changed_files=$(get_changed_projects)

          if [[ $changed_files == *"Git diff failed"* || $changed_files == *"Not a pull request or push event"* ]]; then
            echo "::warning::Failed to get changed files or not a PR/push event. Processing all projects."
            projects=$(find . -type d -name "anchor")
          else
            projects=$(echo "$changed_files" | grep '/anchor/' | sed 's/\/anchor\/.*$/\/anchor/' | sort -u)
          fi

          filtered_projects=$(echo "$projects" | filter_projects "$ignore_regex")

          if [[ -z "$filtered_projects" ]]; then
            echo "::notice::No projects to process after filtering."
            echo "project_batches=[]" >> $GITHUB_OUTPUT
          else
            batches=$(echo "$filtered_projects" | batch_projects)
            echo "project_batches=$batches" >> $GITHUB_OUTPUT
            echo "::notice::Projects to process: $filtered_projects"
          fi
        shell: bash

  build-and-test:
    needs: changes
    if: ${{ fromJson(needs.changes.outputs.project_batches)[0] }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        batch: ${{ fromJson(needs.changes.outputs.project_batches) }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Anchor
        uses: heyAyushh/setup-anchor@v4.0
        with:
          anchor-version: ${{ env.ANCHOR_VERSION }}
          solana-cli-version: ${{ env.SOLANA_VERSION }}
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm i -g pnpm

      - name: Display versions
        run: |
          solana -V
          solana-keygen new --no-bip39-passphrase
          rustc -V
          anchor -V

      - name: Process Anchor projects
        run: |
          set -x
          for project in ${{ toJson(matrix.batch) }}; do
            echo "Processing project: $project"
            cd "$project" || continue

            echo "Building $project"
            if ! anchor build --verbose; then
              echo "::error file=${project}::Build failed for $project"
              exit 1
            fi

            echo "Installing dependencies for $project"
            if ! pnpm install --frozen-lockfile; then
              echo "::error file=${project}::Dependency installation failed for $project"
              exit 1
            fi

            echo "Running tests for $project"
            if ! anchor test --verbose; then
              echo "::error file=${project}::Tests failed for $project"
              exit 1
            fi

            echo "Build and tests succeeded for $project"
            cd - > /dev/null || exit
          done
        shell: bash

      - name: Generate job summary
        if: always()
        run: |
          {
            echo "## Batch Results (Solana ${{ env.SOLANA_VERSION }})"
            echo "Processed projects:"
            for project in ${{ toJson(matrix.batch) }}; do
              echo "- $project"
            done
            echo "Status: ${{ job.status }}"
          } >> $GITHUB_STEP_SUMMARY

  summary:
    needs: build-and-test
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Summarize results
        run: |
          echo "# Anchor Build and Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.build-and-test.result }}" == "success" ]]; then
            echo "✅ All projects built and tested successfully." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some projects failed to build or test. Check the build logs for details." >> $GITHUB_STEP_SUMMARY
          fi
        shell: bash
