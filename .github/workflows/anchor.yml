name: Anchor Build and Test

on:
  schedule:
    - cron: "0 0 * * *"
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

env:
  ANCHOR_VERSION: "0.30.1"
  NODE_VERSION: "20.x"

jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      anchor: ${{ steps.filter.outputs.anchor }}
      anchor_action: ${{ steps.filter.outputs.anchor_action }}
      anchor_files: ${{ steps.filter.outputs.anchor_files }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          list-files: shell
          filters: |
            anchor:
              - added|modified: '**/anchor/**'
            anchor_action:
              - added|modified: '**/workflows/anchor.yml'
              - added|modified: '.github/.ghaignore'

  prepare:
      needs: changes
      if: |
        needs.changes.outputs.anchor == 'true' ||
        needs.changes.outputs.anchor_action == 'true' ||
        github.event_name == 'schedule' ||
        github.event_name == 'push'
      runs-on: ubuntu-latest
      outputs:
        matrix: ${{ steps.set-matrix.outputs.matrix }}
      steps:
        - uses: actions/checkout@v4
        - id: set-matrix
          run: |
            if [[ "${{ github.event_name }}" == "pull_request" && "${{ needs.changes.outputs.anchor_action }}" != "true" ]]; then
              changed_files="${{ needs.changes.outputs.anchor_files }}"
              search_pattern=$(echo "$changed_files" | tr ' ' '|' | sed 's/|$//')
            else
              search_pattern=".*"
            fi

            ignore_file=".github/.ghaignore"
            projects=($(find . -type d -name "anchor" | sed 's|^\./||' | grep -E "$search_pattern" | grep -v -f <(grep . "$ignore_file" 2>/dev/null | grep -v '^$' || echo '^$')))

            if [ ${#projects[@]} -eq 0 ]; then
              echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            else
              matrix_json="["
              for project in "${projects[@]}"; do
                matrix_json+="{\"project\":\"$project\"},"
              done
              matrix_json="${matrix_json%,}]"
              echo "matrix={\"include\":$matrix_json}" >> $GITHUB_OUTPUT
            fi

  build-and-test:
    needs: prepare
    if: ${{ fromJson(needs.prepare.outputs.matrix).include[0] }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.prepare.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Anchor
        uses: heyAyushh/setup-anchor@v4.0
        with:
          anchor-version: ${{ env.ANCHOR_VERSION }}
          solana-cli-version: ${{ env.SOLANA_VERSION }}
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm i -g pnpm

      - name: Display versions
        run: |
          solana -V
          solana-keygen new --no-bip39-passphrase
          rustc -V
          anchor -V

      - name: Process Anchor project
        run: |
          set -x
          project="${{ matrix.project }}"
          echo "Processing project: $project"

          cd "$project" || exit 1

          echo "Building $project"
          if ! anchor build --verbose; then
            echo "::error file=${project}::Build failed for $project"
            exit 1
          fi

          echo "Installing dependencies for $project"
          if ! pnpm install --frozen-lockfile; then
            echo "::error file=${project}::Dependency installation failed for $project"
            exit 1
          fi

          echo "Running tests for $project"
          if ! anchor test --verbose; then
            echo "::error file=${project}::Tests failed for $project"
            exit 1
          fi

          echo "Build and tests succeeded for $project"
        shell: bash

      - name: Generate job summary
        if: always()
        run: |
          {
            echo "## Project Results (Solana ${{ env.SOLANA_VERSION }})"
            echo "Processed project: ${{ matrix.project }}"
            echo "Status: ${{ job.status }}"
          } >> $GITHUB_STEP_SUMMARY
        shell: bash

  summary:
    needs: build-and-test
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Summarize results
        run: |
          echo "# Anchor Build and Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.build-and-test.result }}" == "success" ]]; then
            echo "✅ All projects built and tested successfully." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some projects failed to build or test. Check the build logs for details." >> $GITHUB_STEP_SUMMARY
          fi
        shell: bash
