name: Anchor

on:
  schedule:
    - cron: "0 0 * * *"
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

env:
  ANCHOR_VERSION: "0.30.1"
  SOLANA_VERSION: "1.18.17"
  NODE_VERSION: "20.x"

jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      anchor: ${{ steps.filter.outputs.anchor }}
      ghaignore: ${{ steps.filter.outputs.ghaignore }}
      anchor_action: ${{ steps.filter.outputs.anchor_action }}
      anchor_projects: ${{ steps.get-projects.outputs.projects }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            anchor:
              - '**/anchor/**'
            ghaignore:
              - '.github/.ghaignore'
            anchor_action:
              - '.github/workflows/anchor.yml'

      - name: Get changed anchor projects
        id: get-projects
        if: steps.filter.outputs.anchor == 'true'
        run: |
          ignored_projects=$(grep -v '^#' .github/.ghaignore | tr '\n' '|' | sed 's/|$//')
          projects=$(find . -type d -name 'anchor' | sed 's|^\./||' | grep -vE "$ignored_projects" | jq -R -s -c 'split("\n")[:-1]')
          echo "projects=$projects" >> $GITHUB_OUTPUT

  build-and-test:
    needs: changes
    if: |
      needs.changes.outputs.anchor == 'true' ||
      needs.changes.outputs.ghaignore == 'true' ||
      needs.changes.outputs.anchor_action == 'true' ||
      github.event_name == 'schedule' ||
      github.event_name == 'push'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.changes.outputs.anchor_projects) }}
      fail-fast: false
      max-parallel: 4
    steps:
      - uses: actions/checkout@v4
      - name: Setup Anchor
        uses: heyAyushh/setup-anchor@v4.0
        with:
          anchor-version: ${{ env.ANCHOR_VERSION }}
          solana-cli-version: ${{ env.SOLANA_VERSION }}
          node-version: ${{ env.NODE_VERSION }}

      - name: Display versions and Install pnpm
        run: |
          solana -V
          solana-keygen new --no-bip39-passphrase
          rustc -V
          anchor -V
          npm i -g pnpm

      - name: Build and Test Anchor Project
        id: build-and-test
        run: |
          function build_project() {
            if anchor build; then
              echo "Build succeeded for $1"
            else
              echo "::error file=$1::Build failed for $1"
              return 1
            fi
          }

          function test_project() {
            if pnpm install --frozen-lockfile && anchor test; then
              echo "Tests succeeded for $1"
            else
              echo "::error file=$1::Tests failed for $1"
              return 1
            fi
          }

          cd ${{ matrix.project }}

          if build_project ${{ matrix.project }} && test_project ${{ matrix.project }}; then
            echo "Project ${{ matrix.project }} built and tested successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "Project ${{ matrix.project }} failed to build or test" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  summary:
    needs: build-and-test
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Create Job Summary
        run: |
          echo "# Anchor Build and Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Project | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|" >> $GITHUB_STEP_SUMMARY
          for result in ${{ needs.build-and-test.result }}; do
            project=$(echo $result | cut -d':' -f1)
            status=$(echo $result | cut -d':' -f2)
            if [ "$status" == "success" ]; then
              echo "| $project | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| $project | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
            fi
          done
