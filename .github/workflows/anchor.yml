name: Anchor

on:
  schedule:
    - cron: "0 0 * * *"
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

env:
  MAX_JOBS: 4
  PROJECTS_PER_JOB: 4

jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      should_build_and_test_all: ${{ steps.analyze.outputs.build_and_test_all }}
      changed_projects: ${{ steps.analyze.outputs.changed_projects }}
      total_projects: ${{ steps.analyze.outputs.total_projects }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        if: github.event_name == 'pull_request'
        with:
          list-files: shell
          filters: |
            anchor:
              - added|modified: '**/anchor/**'
            ignore:
              - added|modified: '.github/.ghaignore'
            workflow:
              - added|modified: '.github/workflows/anchor.yml'
      - name: Analyze Changes
        id: analyze
        run: |
          ignore_pattern=$(grep . .github/.ghaignore | grep -v '^$' | tr '\n' '|' | sed 's/|$//')
          echo "Ignore pattern: $ignore_pattern"

          function get_projects() {
            find . -type d -name "anchor" | grep -vE "$ignore_pattern" | sort
          }

          if [[ "${{ github.event_name }}" == "push" || "${{ github.event_name }}" == "schedule" || "${{ steps.changes.outputs.ignore }}" == "true" || "${{ steps.changes.outputs.workflow }}" == "true" ]]; then
            echo "build_and_test_all=true" >> $GITHUB_OUTPUT
            projects=$(get_projects)
          elif [[ "${{ steps.changes.outputs.anchor }}" == "true" ]]; then
            echo "build_and_test_all=false" >> $GITHUB_OUTPUT
            changed_files=(${{ steps.changes.outputs.anchor_files }})
            projects=$(for file in "${changed_files[@]}"; do dirname "${file}" | grep anchor | sed 's#/anchor/.*#/anchor#g'; done | grep -vE "$ignore_pattern" | sort -u)
          else
            echo "build_and_test_all=false" >> $GITHUB_OUTPUT
            projects=""
          fi

          if [[ -n "$projects" ]]; then
            echo "Projects to build and test:"
            echo "$projects"
            total_projects=$(echo "$projects" | wc -l)
            echo "Total projects: $total_projects"
            echo "total_projects=$total_projects" >> $GITHUB_OUTPUT
            echo "changed_projects=$(echo "$projects" | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
          else
            echo "No projects to build and test."
            echo "total_projects=0" >> $GITHUB_OUTPUT
            echo "changed_projects=[]" >> $GITHUB_OUTPUT
          fi

  build-and-test:
    needs: changes
    if: needs.changes.outputs.total_projects != '0'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        index: ${{ fromJson(needs.changes.outputs.should_build_and_test_all == 'true' && format('[0]') || format('[{0}]', join(',',(range(0, fromJson(needs.changes.outputs.total_projects))))))}}
    steps:
      - uses: actions/checkout@v4
      - uses: heyAyushh/setup-anchor@v4.0
        with:
          anchor-version: 0.30.1
          solana-cli-version: 1.18.17
          node-version: 20.x
      - name: Display Versions and Install pnpm
        run: |
          solana -V
          solana-keygen new --no-bip39-passphrase
          rustc -V
          anchor -V
          npm i -g pnpm
      - name: Build and Test
        run: |
          function build_and_test() {
            echo "Building and Testing $1"
            cd "$1"
            if anchor build && pnpm install --frozen-lockfile && anchor test; then
              echo "Build and tests succeeded for $1."
              rm -rf target node_modules
            else
              echo "::error::Build or tests failed for $1."
              echo "$1" >> $GITHUB_WORKSPACE/failed_projects.txt
            fi
            cd - > /dev/null
          }

          readarray -t all_projects < <(echo '${{ needs.changes.outputs.changed_projects }}' | jq -r '.[]?')
          start_index=$(( ${{ matrix.index }} * ${{ env.PROJECTS_PER_JOB }} ))
          end_index=$(( start_index + ${{ env.PROJECTS_PER_JOB }} ))

          for i in $(seq $start_index $(( end_index - 1 ))); do
            if [[ $i -lt ${#all_projects[@]} ]]; then
              build_and_test "${all_projects[$i]}"
            fi
          done

          if [[ -f $GITHUB_WORKSPACE/failed_projects.txt ]]; then
            echo "Some projects failed. Check failed_projects.txt for details."
            exit 1
          fi

  summary:
    needs: [changes, build-and-test]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create job summary
        run: |
          echo "## Anchor Workflow Summary" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.changes.outputs.should_build_and_test_all }}" == "true" ]]; then
            echo "- Built and tested all projects" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Built and tested changed projects:" >> $GITHUB_STEP_SUMMARY
            echo '${{ needs.changes.outputs.changed_projects }}' | jq -r '.[]' | while read project; do
              echo "  - $project" >> $GITHUB_STEP_SUMMARY
            done
          fi

          if [[ "${{ needs.build-and-test.result }}" == "failure" ]]; then
            echo "## :x: Build or tests failed" >> $GITHUB_STEP_SUMMARY
            echo "### Failed projects:" >> $GITHUB_STEP_SUMMARY
            cat $GITHUB_WORKSPACE/failed_projects.txt >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "No failed projects file found." >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.build-and-test.result }}" == "success" ]]; then
            echo "## :white_check_mark: All builds and tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "## :warning: Build and test job was skipped or canceled" >> $GITHUB_STEP_SUMMARY
          fi
