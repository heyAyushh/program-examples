name: Anchor

on:
  schedule:
    - cron: "0 0 * * *"
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      should_build_and_test_all: ${{ steps.analyze.outputs.build_and_test_all }}
      changed_projects: ${{ steps.analyze.outputs.changed_projects }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        if: github.event_name == 'pull_request'
        with:
          list-files: shell
          filters: |
            anchor:
              - added|modified: '**/anchor/**'
            ignore:
              - added|modified: '.github/.ghaignore'
            workflow:
              - added|modified: '**/workflows/anchor.yml'
      - name: Analyze Changes
        id: analyze
        run: |
          if [[ "${{ github.event_name }}" == "push" || "${{ github.event_name }}" == "schedule" || "${{ steps.changes.outputs.ignore }}" == "true" || "${{ steps.changes.outputs.workflow }}" == "true" ]]; then
            echo "build_and_test_all=true" >> $GITHUB_OUTPUT
          else
            echo "build_and_test_all=false" >> $GITHUB_OUTPUT
            changed_files=(${{ steps.changes.outputs.anchor_files }})
            ignored_pattern=$(grep . .github/.ghaignore | grep -v '^$' | sed 's/.*/"&"/' | tr '\n' '|' | sed 's/|$//')
            changed_projects=$(for file in "${changed_files[@]}"; do dirname "${file}" | grep anchor | sed 's#/anchor/.*#/anchor#g'; done | grep -vE "$ignored_pattern" | sort -u | jq -R -s -c 'split("\n")[:-1]')
            echo "changed_projects=$changed_projects" >> $GITHUB_OUTPUT
          fi
  build-and-test:
    needs: changes
    if: needs.changes.outputs.should_build_and_test_all == 'true' || needs.changes.outputs.changed_projects != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Build and Test All Projects
            condition: ${{ needs.changes.outputs.should_build_and_test_all == 'true' }}
          - name: Build and Test Changed Projects 1-64
            condition: ${{ needs.changes.outputs.should_build_and_test_all != 'true' }}
            project_slice: "[0:64]"
          - name: Build and Test Changed Projects 65-128
            condition: ${{ needs.changes.outputs.should_build_and_test_all != 'true' }}
            project_slice: "[64:128]"
          - name: Build and Test Changed Projects 129-192
            condition: ${{ needs.changes.outputs.should_build_and_test_all != 'true' }}
            project_slice: "[128:192]"
          - name: Build and Test Changed Projects 193-256
            condition: ${{ needs.changes.outputs.should_build_and_test_all != 'true' }}
            project_slice: "[192:256]"
    steps:
      - uses: actions/checkout@v4
      - uses: heyAyushh/setup-anchor@v4.0
        with:
          anchor-version: 0.30.1
          solana-cli-version: 1.18.17
          node-version: 20.x
      - name: Display Versions and Install pnpm
        run: |
          solana -V
          solana-keygen new --no-bip39-passphrase
          rustc -V
          anchor -V
          npm i -g pnpm
      - name: Build and Test
        run: |
          function build_and_test() {
            echo "Building and Testing $1"
            cd "$1"
            if anchor build && pnpm install --frozen-lockfile && anchor test; then
              echo "Build and tests succeeded for $1."
              rm -rf target node_modules
            else
              echo "::error::Build or tests failed for $1."
              failed_projects+=("$1")
            fi
            cd - > /dev/null
          }

          if [[ "${{ matrix.condition }}" == "true" ]]; then
            if [[ "${{ matrix.name }}" == "Build and Test All Projects" ]]; then
              readarray -t project_dirs < <(find . -type d -name "anchor" | grep -vE "$(grep . .github/.ghaignore | grep -v '^$' | sed 's/.*/"&"/' | tr '\n' '|' | sed 's/|$//')")
            else
              readarray -t project_dirs < <(echo '${{ needs.changes.outputs.changed_projects }}' | jq -r '.[${{ matrix.project_slice }}][]?')
            fi

            echo "Projects to build and test:"
            printf "%s\n" "${project_dirs[@]}"

            failed_projects=()
            for project in "${project_dirs[@]}"; do
              build_and_test "$project"
            done

            if [ ${#failed_projects[@]} -ne 0 ]; then
              echo "::error::The following projects failed building or testing:"
              printf "%s\n" "${failed_projects[@]}"
              exit 1
            else
              echo "All projects built and tested successfully."
            fi
          fi
  summary:
    needs: build-and-test
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Create job summary
        run: |
          echo "## Anchor Workflow Summary" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.changes.outputs.should_build_and_test_all }}" == "true" ]]; then
            echo "- Built and tested all projects" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Built and tested changed projects:" >> $GITHUB_STEP_SUMMARY
            echo '${{ needs.changes.outputs.changed_projects }}' | jq -r '.[]' | while read project; do
              echo "  - $project" >> $GITHUB_STEP_SUMMARY
            done
          fi

          if [[ "${{ needs.build-and-test.result }}" == "failure" ]]; then
            echo "## :x: Build or tests failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "## :white_check_mark: All builds and tests passed" >> $GITHUB_STEP_SUMMARY
          fi
